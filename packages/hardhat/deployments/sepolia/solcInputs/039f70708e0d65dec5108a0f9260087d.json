{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/perennialprediction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.27;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * @title perennialprediction\n * @dev Advanced prediction market for public goods and environmental projects\n */\ncontract perennialprediction is Ownable, ReentrancyGuard, Pausable {\n    using ECDSA for bytes32;\n\n    // Optimize storage by packing related variables\n    struct MarketCore {\n        string title;\n        string description;\n        uint64 endTime;\n        bool isResolved;\n        bool isHyperLocal;\n        MarketType marketType;\n    }\n\n    struct MarketData {\n        uint128 yesShares;\n        uint128 noShares;\n        uint128 totalStake;\n        uint128 minStake;\n        uint128 maxStake;\n        uint64 reputationRequired;\n        bool outcome;\n    }\n\n    struct MarketLocation {\n        // Change to int256 to handle more precise coordinates\n        int256 latitude;  // Multiplied by 1e18 for precision\n        int256 longitude; // Multiplied by 1e18 for precision\n        uint128 poolId;\n        address creator;\n    }\n\n    struct UserPosition {\n        uint128 yesShares;\n        uint128 noShares;\n        uint128 stakedAmount;\n        uint64 lastInteractionTime;\n        bool hasClaimedRewards;\n    }\n\n    struct UserReputation {\n        uint128 score;\n        uint64 marketsCreated;\n        uint64 successfulPredictions;\n        uint128 totalStaked;\n        uint64 lastUpdateTime;\n    }\n\n    // Enums\n    enum MarketType { FINITE, INFINITE, HYBRID }\n\n    // Constants - packed into single storage slots\n    uint64 public constant REPUTATION_THRESHOLD = 100;\n    uint64 public constant MIN_STAKE_PERIOD = 1 days;\n    uint64 public constant MAX_STAKE_PERCENTAGE = 20;\n    uint64 public constant EARLY_UNSTAKE_PENALTY = 10;\n\n    // State variables\n    IERC20 public immutable stakingToken;\n    uint64 public marketCount;\n\n    // Mappings - optimized for gas efficiency\n    mapping(uint256 => MarketCore) public marketCores;\n    mapping(uint256 => MarketData) public marketData;\n    mapping(uint256 => MarketLocation) public marketLocations;\n    mapping(uint256 => mapping(address => UserPosition)) public positions;\n    mapping(address => UserReputation) public userReputations;\n    mapping(address => bool) public isMarketCreator;\n\n    // Events\n    event MarketCreated(\n        uint64 indexed marketId,\n        address indexed creator,\n        string title,\n        MarketType marketType,\n        uint64 endTime,\n        bool isHyperLocal,\n        int256 latitude,\n        int256 longitude\n    );\n\n    event SharesTraded(\n        uint64 indexed marketId,\n        address indexed user,\n        bool isYes,\n        uint128 amount,\n        uint128 price,\n        bool isBuy\n    );\n\n    event MarketResolved(uint64 indexed marketId, bool outcome);\n    event ReputationUpdated(address indexed user, uint128 newScore);\n    event RewardsClaimed(uint64 indexed marketId, address indexed user, uint128 amount);\n    event MarketCreatorAdded(address indexed creator);\n\n    // Modifiers\n    modifier onlyAuthorizedCreator() {\n        require(isMarketCreator[msg.sender] || owner() == msg.sender, \"Not authorized\");\n        _;\n    }\n\n    modifier validMarket(uint64 _marketId) {\n        require(_marketId > 0 && _marketId <= marketCount, \"Invalid market ID\");\n        _;\n    }\n\n    modifier marketActive(uint64 _marketId) {\n        require(!marketCores[_marketId].isResolved, \"Market resolved\");\n        require(block.timestamp < marketCores[_marketId].endTime, \"Market ended\");\n        _;\n    }\n\n    constructor(address _stakingToken) Ownable(msg.sender) {\n        stakingToken = IERC20(_stakingToken);\n    }\n\n    // Core market functions\n    function createMarket(\n        MarketParams calldata params\n    ) external onlyAuthorizedCreator whenNotPaused nonReentrant returns (uint64) {\n        require(bytes(params.title).length > 0, \"Invalid title\");\n        require(bytes(params.description).length > 0, \"Invalid description\");\n        require(params.endTime > uint64(block.timestamp), \"Invalid end time\");\n        require(params.minStake > 0, \"Min stake must be > 0\");\n        \n        // Convert to smallest unit for comparison\n        uint256 minStakeInSmallestUnit = uint256(params.minStake) * 1e18;\n        uint256 maxStakeInSmallestUnit = uint256(params.maxStake) * 1e18;\n        require(maxStakeInSmallestUnit > minStakeInSmallestUnit, \"Max stake must be > min stake\");\n        \n        require(params.reputationRequired >= 0, \"Invalid reputation requirement\");\n        \n        // Update coordinate validation\n        if (params.isHyperLocal) {\n            // Check latitude range (-90 to 90) * 1e18\n            require(\n                params.latitude >= -90e18 && \n                params.latitude <= 90e18, \n                \"Invalid latitude\"\n            );\n            // Check longitude range (-180 to 180) * 1e18\n            require(\n                params.longitude >= -180e18 && \n                params.longitude <= 180e18, \n                \"Invalid longitude\"\n            );\n        }\n\n        marketCount++;\n        uint64 newMarketId = marketCount;\n\n        _createMarketCore(newMarketId, params);\n        _createMarketData(newMarketId, params);\n        _createMarketLocation(newMarketId, params);\n        _updateCreatorReputation(msg.sender);\n\n        emit MarketCreated(\n            newMarketId,\n            msg.sender,\n            params.title,\n            params.marketType,\n            params.endTime,\n            params.isHyperLocal,\n            params.latitude,\n            params.longitude\n        );\n\n        return newMarketId;\n    }\n\n    // Internal functions to handle market creation\n    function _createMarketCore(uint64 _marketId, MarketParams calldata _params) internal {\n        marketCores[_marketId] = MarketCore({\n            title: _params.title,\n            description: _params.description,\n            endTime: _params.endTime,\n            isResolved: false,\n            isHyperLocal: _params.isHyperLocal,\n            marketType: _params.marketType\n        });\n    }\n\n    function _createMarketData(uint64 _marketId, MarketParams calldata _params) internal {\n        marketData[_marketId] = MarketData({\n            yesShares: 0,\n            noShares: 0,\n            totalStake: 0,\n            minStake: _params.minStake,\n            maxStake: _params.maxStake,\n            reputationRequired: _params.reputationRequired,\n            outcome: false\n        });\n    }\n\n    function _createMarketLocation(uint64 _marketId, MarketParams calldata _params) internal {\n        marketLocations[_marketId] = MarketLocation({\n            latitude: _params.latitude,\n            longitude: _params.longitude,\n            poolId: 0,\n            creator: msg.sender\n        });\n    }\n\n    // Helper struct to avoid stack too deep\n    struct MarketParams {\n        string title;\n        string description;\n        uint64 endTime;\n        bool isHyperLocal;\n        int256 latitude;   // Changed to int256\n        int256 longitude;  // Changed to int256\n        MarketType marketType;\n        uint128 minStake;\n        uint128 maxStake;\n        uint64 reputationRequired;\n    }\n\n    // Trading functions\n    function tradeShares(\n        uint64 _marketId,\n        bool _isYes,\n        uint128 _amount,\n        bool _isBuy\n    ) external validMarket(_marketId) marketActive(_marketId) nonReentrant whenNotPaused {\n        MarketData storage mData = marketData[_marketId];\n        UserPosition storage position = positions[_marketId][msg.sender];\n        \n        // Convert amount to wei/smallest unit for comparison\n        uint256 amountInSmallestUnit = uint256(_amount) * 1e18;\n        uint256 minStakeInSmallestUnit = uint256(mData.minStake) * 1e18;\n        uint256 maxStakeInSmallestUnit = uint256(mData.maxStake) * 1e18;\n\n        require(amountInSmallestUnit >= minStakeInSmallestUnit, \"Below min stake\");\n        require(amountInSmallestUnit <= maxStakeInSmallestUnit, \"Above max stake\");\n        require(\n            userReputations[msg.sender].score >= mData.reputationRequired,\n            \"Insufficient reputation\"\n        );\n\n        uint128 price = _calculatePrice(_marketId, _isYes, _amount, _isBuy);\n        \n        if (_isBuy) {\n            require(\n                stakingToken.transferFrom(msg.sender, address(this), price),\n                \"Transfer failed\"\n            );\n            \n            if (_isYes) {\n                mData.yesShares += _amount;\n                position.yesShares += _amount;\n            } else {\n                mData.noShares += _amount;\n                position.noShares += _amount;\n            }\n            position.stakedAmount += price;\n            mData.totalStake += price;\n        } else {\n            uint128 shares = _isYes ? position.yesShares : position.noShares;\n            require(shares >= _amount, \"Insufficient shares\");\n            \n            uint128 penalty = _calculatePenalty(_marketId, msg.sender, _amount);\n            uint128 payout = price - penalty;\n            \n            if (_isYes) {\n                mData.yesShares -= _amount;\n                position.yesShares -= _amount;\n            } else {\n                mData.noShares -= _amount;\n                position.noShares -= _amount;\n            }\n            \n            position.stakedAmount -= payout;\n            mData.totalStake -= payout;\n            \n            require(stakingToken.transfer(msg.sender, payout), \"Transfer failed\");\n        }\n        \n        position.lastInteractionTime = uint64(block.timestamp);\n        emit SharesTraded(_marketId, msg.sender, _isYes, _amount, price, _isBuy);\n    }\n\n    // Internal price calculation functions\n    function _calculatePrice(\n        uint64 _marketId,\n        bool _isYes,\n        uint128 _amount,\n        bool _isBuy\n    ) internal view returns (uint128) {\n        MarketData storage mData = marketData[_marketId];\n        uint256 totalShares = _isYes ? mData.yesShares : mData.noShares;\n        uint256 otherShares = _isYes ? mData.noShares : mData.yesShares;\n        \n        // Convert amount to smallest unit for calculations\n        uint256 amountInSmallestUnit = uint256(_amount) * 1e18;\n        \n        // Dynamic pricing using LMSR-inspired formula with decimal support\n        uint256 basePrice = (totalShares * 1e18) / (totalShares + otherShares + 1);\n        uint256 priceImpact = (amountInSmallestUnit * 1e18) / (mData.totalStake + 1);\n        \n        if (_isBuy) {\n            return uint128((basePrice + ((priceImpact * (_isYes ? 1 : 2)) / 100)) / 1e18);\n        } else {\n            return uint128((basePrice - ((priceImpact * (_isYes ? 2 : 1)) / 100)) / 1e18);\n        }\n    }\n\n    function _calculatePenalty(\n        uint64 _marketId,\n        address /* _user */, // Comment out unused parameter\n        uint128 _amount\n    ) internal view returns (uint128) {\n        UserPosition storage position = positions[_marketId][msg.sender];\n        uint64 timeHeld = uint64(block.timestamp) - position.lastInteractionTime;\n        \n        if (timeHeld >= MIN_STAKE_PERIOD) return 0;\n        \n        uint128 penaltyPercentage = uint128(((MIN_STAKE_PERIOD - timeHeld) * EARLY_UNSTAKE_PENALTY) / MIN_STAKE_PERIOD);\n        return uint128((uint256(_amount) * uint256(penaltyPercentage)) / 100);\n    }\n\n    // Market resolution functions\n    function resolveMarket(\n        uint64 _marketId,\n        bool _outcome\n    ) external onlyOwner validMarket(_marketId) nonReentrant {\n        MarketCore storage mCore = marketCores[_marketId];\n        MarketData storage mData = marketData[_marketId];\n        \n        require(!mCore.isResolved, \"Already resolved\");\n        require(\n            mCore.marketType == MarketType.FINITE || \n            block.timestamp >= mCore.endTime,\n            \"Cannot resolve yet\"\n        );\n\n        mCore.isResolved = true;\n        mData.outcome = _outcome;\n\n        _updateMarketReputations(_marketId);\n        emit MarketResolved(_marketId, _outcome);\n    }\n\n    function _updateMarketReputations(uint64 _marketId) internal {\n        MarketData storage mData = marketData[_marketId];\n        uint256 totalParticipants = uint256(mData.yesShares) + uint256(mData.noShares);\n        \n        if (totalParticipants == 0) return;\n\n        uint128 rewardPerShare = uint128((uint256(100) * 1e18) / totalParticipants);\n        bool outcome = mData.outcome;\n        \n        // Update reputations for correct predictions\n        // Note: This could be optimized further with a mapping of participants\n        _updateReputationForOutcome(_marketId, outcome, rewardPerShare);\n    }\n\n    function _updateReputationForOutcome(\n        uint64 _marketId,\n        bool _outcome,\n        uint128 _rewardPerShare\n    ) internal {\n        MarketData storage mData = marketData[_marketId];\n        uint128 correctShares = _outcome ? mData.yesShares : mData.noShares;\n        \n        if (correctShares > 0) {\n            UserReputation storage reputation = userReputations[msg.sender];\n            uint128 reward = uint128((uint256(correctShares) * uint256(_rewardPerShare)) / 1e18);\n            \n            reputation.score += reward;\n            reputation.successfulPredictions++;\n            reputation.lastUpdateTime = uint64(block.timestamp);\n            \n            emit ReputationUpdated(msg.sender, reputation.score);\n        }\n    }\n\n    // Claim rewards function\n    function claimRewards(\n        uint64 _marketId\n    ) external validMarket(_marketId) nonReentrant {\n        MarketCore storage mCore = marketCores[_marketId];\n        MarketData storage mData = marketData[_marketId];\n        UserPosition storage position = positions[_marketId][msg.sender];\n        \n        require(mCore.isResolved, \"Market not resolved\");\n        require(!position.hasClaimedRewards, \"Already claimed\");\n        require(mData.totalStake > 0, \"No stake in the market\");\n        \n        uint128 reward = _calculateReward(_marketId, position);\n        require(reward > 0, \"No reward available\");\n        \n        position.hasClaimedRewards = true;\n        require(stakingToken.transfer(msg.sender, reward), \"Transfer failed\");\n        \n        emit RewardsClaimed(_marketId, msg.sender, reward);\n    }\n\n    function _calculateReward(\n        uint64 _marketId,\n        UserPosition storage _position\n    ) internal view returns (uint128) {\n        MarketData storage mData = marketData[_marketId];\n        bool outcome = mData.outcome;\n        \n        uint128 winningShares = outcome ? _position.yesShares : _position.noShares;\n        if (winningShares == 0) return 0;\n        \n        uint128 totalWinningShares = outcome ? mData.yesShares : mData.noShares;\n        return uint128((uint256(mData.totalStake) * uint256(winningShares)) / uint256(totalWinningShares));\n    }\n\n    // Utility functions\n    function _updateCreatorReputation(address _creator) internal {\n        UserReputation storage reputation = userReputations[_creator];\n        reputation.marketsCreated++;\n        reputation.score += 10;\n        reputation.lastUpdateTime = uint64(block.timestamp);\n        \n        emit ReputationUpdated(_creator, reputation.score);\n    }\n\n    // Emergency functions\n    function emergencyWithdraw(\n        address _token,\n        uint256 _amount\n    ) external onlyOwner {\n        require(_token != address(stakingToken), \"Cannot withdraw staking token\");\n        IERC20(_token).transfer(owner(), _amount);\n    }\n\n    receive() external payable {}\n\n    // Add this function near the other admin functions\n    function addMarketCreator(address _creator) external onlyOwner {\n        require(_creator != address(0), \"Invalid creator address\");\n        require(!isMarketCreator[_creator], \"Already a market creator\");\n        isMarketCreator[_creator] = true;\n        emit MarketCreatorAdded(_creator);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}